trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: secrets-acr
  - name: TAG
    value: abb


parameters:
  - name: namespace
    displayName: 'Select Deployment Namespace'
    type: string
    default: 'nonprod'
    values:
      - nonprod
      - preprod
      - prod

  - name : acr_name
    displayName: ACR Name
    type: string
    default: 'acrdemoabb'
  
  - name : image_name
    displayName: Image Name
    type: string
    default: 'sampleapp'

  - name : cluster_name
    displayName: Cluster Name
    type: string
    default: 'ABB_Demo_Cluster'

  - name : resource_group
    displayName: Resource group Name
    type: string
    default: 'ABB-DEMO'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - script: |
        docker build -t ${{ parameters.acr_name }}.azurecr.io/${{ parameters.image_name }}:$(TAG) .
        echo "$(ACR_PASSWORD)" | docker login ${{ parameters.acr_name }}.azurecr.io -u $(ACR_USERNAME) --password-stdin
        docker push ${{ parameters.acr_name }}.azurecr.io/${{ parameters.image_name }}:$(TAG)
      displayName: 'Build and Push Docker Image'


- stage: Code_Analysis
  displayName: 'SonarCloud Code Analysis'
  dependsOn: Build
  jobs:
    - job: SonarCloud_Scan
      displayName: 'Run SonarCloud Analysis'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: self

        # 1️⃣ Prepare Analysis Configuration
        - task: SonarCloudPrepare@2
          inputs:
            SonarCloud: 'Sonarqube'                   # Service connection name you created
            organization: 'ARUNDEMO3177'              # Your SonarCloud organization name
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'ARUNDEMO3177_DEMOABB'     # Project key from SonarCloud
            cliProjectName: 'DEMOABB'
            cliSources: '.'

        # 2️⃣ Run the Code Analysis
        - task: SonarCloudAnalyze@2
          displayName: 'Analyze Source Code'

        # 3️⃣ Publish Results to SonarCloud
        - task: SonarCloudPublish@2
          displayName: 'Publish Analysis Results'
          inputs:
            pollingTimeoutSec: '300'

- stage: Deploy_to_AKS
  displayName: 'Deploy to AKS'
  jobs:
    - job: Application_Deployment
      steps:
      - task: AzureKeyVault@2
        displayName: "Retrieve SPN Credentials from Key Vault"
        inputs:
          azureSubscription: "arm-service-connection"
          keyVaultName: "SecretsforABB"
          secretsFilter: "spn-tenant-id,spn-client-id,spn-client-secret,subscription-id"
  
      - task: Bash@3
        displayName: "Login to Azure using SPN"
        inputs:
          targetType: 'inline'
          script: |
            echo "Logging in to Azure using Service Principal"
            az login --service-principal \
              --username $(spn-client-id) \
              --password $(spn-client-secret) \
              --tenant $(spn-tenant-id)
            
            az account set --subscription $(subscription-id)
            
            echo "Successfully authenticated with Azure CLI"


            az aks get-credentials --resource-group ${{ parameters.resource_group }} --name ${{ parameters.cluster_name }} --overwrite-existing
          
            echo "Verifying AKS Connection"
            kubectl config current-context
            kubectl cluster-info
            kubectl get nodes
    
  
      - task: Bash@3
        displayName: "Set & Verify AKS Kubeconfig"
        inputs:
          targetType: 'inline'
          script: |
            kubectl config current-context
            kubectl cluster-info
      
      - script: |
          echo "Deploying to Namespace: ${{ parameters.namespace }}"
          
          kubectl get namespace ${{ parameters.namespace }} || kubectl create namespace ${{ parameters.namespace }}

          kubectl create secret docker-registry acr-secret \
          --docker-server=${{ parameters.acr_name }}.azurecr.io \
          --docker-username=$(ACR_USERNAME) \
          --docker-password=$(ACR_PASSWORD) \
          --namespace=${{ parameters.namespace }} --dry-run=client -o yaml | kubectl apply -f -

          kubectl apply -f deployment.yaml -n ${{ parameters.namespace }} --validate=false
          kubectl apply -f service.yaml -n ${{ parameters.namespace }} --validate=false

          echo "Waiting for LoadBalancer IP..."
          sleep 15

          kubectl get svc myappabb-service -n ${{ parameters.namespace }}
          echo "Get the External IP of the service and open it in your browser."
        displayName: 'Apply Kubernetes Deployment (Validation Off)'


